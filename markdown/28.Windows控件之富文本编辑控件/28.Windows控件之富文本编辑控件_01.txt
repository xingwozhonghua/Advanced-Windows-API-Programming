Windows API编程 映 HU树5 C++ 3IWCED	CWSt
Windows控件之富文本编辑控件
本视频版权归黄强所有、侵权必究
indows控件之富文本编辑控件
富文本编辑控件不仅能输入，编辑，打印和保存文本，还可以设置文本、段落格 式等，并可包含嵌入式组件对象模型(COM)对象。富文本编辑控件支持几乎所有用 于多行编辑控件的消息和通知代码，因此已使用编辑控件的应用程序可轻松更改为使 用丰富的编辑控件。
本视频版权归黄强所有、侵权必究
富文本编辑控件版本
富文本编辑控件的原始规范是Microsoft Rich Edit 1.0;目前的规范是微软Rich Edit 4.1 o富编辑的每个版本都是前一版本的超集，在创建丰富的编辑控件之前，应该调用 LoadLibrary函数来力口载相应有态库。
控件版本	动态链接库名	窗口类名
1.0	Riched32.dll	RICHEDITCLASS
2.0	Riched20.dll	RICHEDITCLASS
3.0	Riched20.dll	RICHEDITCLASS
4.1	Msftedit.dll	MSFTEDITCLASS
注：需要包含头文件#include<Richedit.h >
本视频版权归黄强所有、侵权必究
了控件样式
dwStyle:指定控件的风格。可以是以下风格的任意组合。
ES_AUTOHSCROLL:当用户在行尾键入f 字符时，正文将自动向右滚动10个字符，当用户按回车键时， 正文总是滚向左边
ES_AUTOVSCROLL:当用户在最后f可见行按回车键时，正文向上滚动一页
ES_CENTER、ES_LEFT、ES_RIGHT在多行编辑框中使正文居中左 右对齐正文
ES_MULTILINE:指定f多行编辑器。若多行编辑器不指定ES_AUTOHSCROLL风格，则会自动换行，若 不指定ES-AUTOVSCROLL,则多行编辑器会在窗口中正文装满时发由警告声响
ES_NOHIDESEL:默认时，当编辑框失去输入焦点后会隐藏所选的正文，当获得输入焦点时又显示出来。设 置该风榕可禁止这种默认行为
ES_NUMBER :编辑框中只允许输入数字
ES_PASSWORD:使所有键入的字符都用〃*"来显示
ES_READONLY:将编辑框设置成只读的
ES_WANTRETURN:使多行编辑器接收回车键输入并换行。如果不指定该风格，按回车键会选择默认的命 令按钮，这往往会导致对话框的关闭
ES_DISABLENOSCROLL禁用滚动条而不是在不需要时隐藏滚动条。
ES_SAVESEL当控制失去焦点时保留选择。默认情况下，控件的全部内容在重新获得焦点时被选中。
ES_SUNKEN显示带有凹陷边框样式的控件，以便丰富的编辑控件显示在其父窗口中。
除了上面的风格外，一般还会设置WS_CHILD、WS_VISIBLE、WS_BORDER等窗口风格。
本视频版权归黄强所有、侵权必究
窗口样式
dwStyle的取值可为如下：
WS_BORDER创建具有边框的窗口。
WS_CAPTION创建该窗口具有标题栏（意味着WS_BORDER样式）。
WS_CHILD创建f 子窗口。不能与使用WS_POPUP样式。
WS_DISABLED创建最初处于禁用状态的窗口。
WS_VISIBLE创建初始可见的窗口。
WS_GR OUP指定一组控件在其中用户可以从一个控件移到下的箭头键的第一个控件。
WS_HSCROLL创建该窗口具有水平滚动条。
WS_VSCROLL创建该窗口具有f垂直滚动条。
WSJCONIC创建开始最小化窗口。与相同WS_MINIMIZE样式。
WS_MAXIMIZEBOX创建一个窗口，都有f 最大化按钮。
WS_MINIMIZEBOX创建具有最小化按钮的窗口。
WS_OVERLAPPED创建重叠的窗口。重叠的窗口通常具有标题和边框。
WS_POPUP创建一个弹出窗口。不能与使用WS_CHILD样式。
WS_POPUPWINDOW创建与一个弹出窗口WS_BORDER, WS_POPUPf 和WS_SYSMENU样式。 WS_SIZEBOX创建具有大小调整边框的窗口。与相同WS_THICkFRAME样式。
WS_SYSMENU创建该窗口具有标题栏中的控件菜单框。硬用仅为带有标题栏的窗口。
WS_TABSTOP控件通过其用户可以通过使用TAB键移动的任意数量之一指定。TAB键将用户移至指定的下一个 控件WS_TABSTOP样式。
WS_TILEDWINDOW 与相同WS_OVERLAPPEDWINDOW样式。
本视频版权归黄强所有、侵权必究
IJ建富文本控件
〃自定义的窗口过程
LRESULT CALLBACK MyWindowProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM I Pa ram)
switch (Msg)
case WM CREATE:
在 WMCREAT&肖 息的响应中创建子 窗匚1、控件等等
Load Li bra ry(TEXT(" M sftedit.d II*));
HWND HRichEdit= CreateWindow(MSFTEDIT_CLASS,
L”这是一个富文本编辑控件”，
WS_CHILD | WS_VISIBLE | ES_MULTILINE 50, 30, 200,200, hWnd, (HMENU)111, ((LPCREATESTRUCT)IParam)->hlnstance, NULL);
}break;
加载动态库，系统注 册的窗口类
MSFTEDIT CLASS
}
return DefWindowProc(hWnd, Msg, wParam, I Pa ram);
本视频版权归黄强所有、侵权必究
可以向富文本编辑控件发送EM XXX消息来操作它。
EMSETCHARFORMAT
EM[GETCHARFORMAT
EM_HIDESELECTION
EMGETSELTEXT
EM[GETTEXTEX
EM_SETBKGNDCOLOR
EM SETEVENTMASK
设置捽格式
获取捽格式
消息隐藏或显示丰富的编辑控件的选择。
检索当前选定的文本 从富编擅控件申获取文本
设置富编辑控件的背景色。
设置丰富的编辑控件的事件掩码。事件掩码指定控件向其 父窗口发送的通知代码。
更多查阅MSDN链接：https://msdn.microsoft.com/en-us/library/windows/desktop/ff486015(v=vs.85).aspx
本视频版权归黄强所有、侵权必究
HARFORMAT结构体
typedef struct	charformat {
UINT	cbSize; 〃指定结构的字节大小
DWORD	dwMask;〃包含要设置的有效信息或属性的成员,可以是零个，一个或多个值
DWORD	d wEffects;//效果
LONG	yHeight; 〃字符高度
LONG	yOffset;//从基线开始的字符偏移量
COLORREF	crTextColor;//文字颜色
BYTE	bCharSet;//字符集值。
BYTE	bPitchAndFamil y;//字体家族和音调
TCHAR s	zFaceName [LF FACESIZE];//字体名称
) CHARFORMAT;
本视频版权归黄强所有、侵权必究
HARFORMAT结构体
dwMask
类型：DWORD
包含要设置的有效信息或属性的成员。此成员可以是零个，一个或多个以下值中的一个。
CFMALL cfmIbold CFM]CHARSET CFM[COLOR cfm[effects
CFMFACE CFMJTALIC
CFM"OFFSET
以下值的组合：CFM_EFFECTS | CFM_SIZE | CFM_FACE | CFM_OFFSET | CFM_CHARSET dwEffects成员的CFE_BOLD值是有效的。
该bC ha rSet成员是有效的。
该c rTextColor构件和的CFEAUTOCOLOR值dwEffects成员是有效的。
Windows 8:以下值的组合：CFM_BOLD | CFMJTALIC | CFM_UNDERLINE |
CFM_COLOR| CFM_STRIKEOUT | CFE_PROTECTED | CFM_LINK
该szFaceName成员是有效的。
dwEffects成员的CFEJTALIC值是有效的。
该Y偏移成员是有效的。
CFMPROTECTED
CFM^SIZE
CFM>TRIKEOUT
CFMpNDERLINE
dwEffects成员的CFE_PROTECTED值是有效的。 该y Heig ht成员是有效的。
d w Effects 成员的 C F ESTRIK EO UT 值有效。 dwEffects成员的CF匚U NDERLIN E值是有效的。
本视频版权归黄强所有、侵权必究
HARFORMAT结构体
dwEffects
类型：DWORD 字符效果。该成员可以是以下值的组合。
CFEAUTOCOLOR CFE^BOLD CFE^DISABLED CFEJTALIC CFE~STRIKEOUT CFEpNDERLINE CFE>ROTECTED
文本颜色是GetSysColor (COLOR WINDOWTEXT)的返回值。 字符加粗。
RichEdit 2.0和更高版本：字符显示偏移了3/4点或一个像素，以较大为准。 字符是斜体。
字符被划去。
字符加下划线。
字符受到保护;尝试修改它们将导致EN_PROTECTED通知代码。
本视频版权归黄强所有、侵权必究
〃选择文本
SendMessage(hRichEdit, EM_SETSEL,2, 7);
CHARFORMAT cf;
cf.cbSize = sizeof(CHARFORMAT);
〃获取默认文本格式
SendMessage(hRichEdit, EM GETCHARFORMAT, SCF DEFAULT, (LPARAM)&cf);
cf.dwMask |= CFM BOLD;
cf.dwEffects |= CFE BOLD;
cf.dwMask |= CFM ITALIC;
cf.dwEffects |= CF曰TALIC;
cf.dwMask |= CFM UNDERLINE;
cf.dwEffects |= CFf UNDERLINE;
cf.dwMask |= CFM STRIKEOUT;
cf.dwEffects |= CF已STRIKEOUT;
本视频版权归黄强所有、侵权必究
cf.dwMask |= CFM SIZE; cf.yHeight = 24 * 24;
cf.dwMask |= CFM FACE; wcscpy(cf.szFaceName,L"楷体，
cf.dwEffects &= -CFE AUTOCOLOR;
cf.dwMask |= CFM COLOR;
cf.crTextColor = RGB(255, 0, 0);
〃设置文本格式
SendMessage(hRichEdit, EM SETCHARFORMAT, SCF SELECTION, (LPARAM)&cf);
//wparamO为不隐藏高亮选择，或者指定ES_NOHIDESEL样式高亮显示选择
SendMessage(hRichEdit, EM HIDESELECTION, 0, 0);
〃取消文本选择
SendMessage(hRichEdit, EM SETSEL, -1, -1);
〃设置控件背景色
SendMessage(hRichEdit, EM SETBKGNDCOLOR, 0,RGB(0,255,0));
本视频版权归黄强所有、侵权必究
控件会向父窗口发送WM COMMAND或WM NOTIFY;肖息的形式发送通知代码。
ENCHANGE
ENSELCHANGE
ENMSGFILTER
更多查阅MSDN链接:
辑控件的主窗口发生了更改、WM_COMAMND消息，要接收 EN CHANGE通知，在EM SETEVENTMASK掩码中指ENM CHANGE
知丰富的编辑控件的父窗口当前选择已更改，以WM_N OTIFY消息的形式 发送此通知代码，结构为SELCHANGE ,掩码中指定ENM_SELCHANGE
通知控件中一个富有编辑控件的键盘或鼠标事件的父窗口。丰富的编辑控 件以W M_NOTI FY消息的形式发送此通知代码。
httDS:〃msdn.microsoft.com/en-us/library/windows/desktoD/ff486016(v=vs.85).asDX
本视频版权归黄强所有、侵权必究
WM NOTIFY消息
WM COMMAND可携带的信息较少，WM NOTIFY比WM COMMAND功能更强大, 可以存储二些额外的信息，Edit,Button,ListBox等发送\AZM_COMRiAND消息，而 ListView,Toolbar,Tree等控件发送WM_NOTIFY消息，因为需要提供的信息更多。
消息类型	WPARAM	LPARAM
WM.NOTIFY	发生WM_NOTTFY消息的控件ID	NMHDR牍十
我们将所有附加信息都存放在NMHDR (Notify Message Handler)的一个公共结构体中，该结构体 指针通过LPARAM通知到父窗口。NMHDR如下：
typedefstruct tagNMHDR
{
HWND hwndFrom; 〃控件句柄.
UINT PTR idFrom; 〃控件 ID.
UINT~ code; // NM code.
} NMHDR;
本视频版权归黄强所有、侵权必究
case WM COMMAND:
}break;
switch (LOWORD(wParam))
{
case 111:
if (HIWORD(wParam) == EN CHANGE)
{
MessageBox(NULL, L“输入改变了!、L“提示“，MB OK | MB ICONINFORMATION);
TCHAR buf[64];
GetWindowText((HWND)IParam/ buf, 64); MessageBox(NULL, buf L“提示、MB OK | MB ICONINFORMATION);
}
break;
default:
break;
}
本视频版权归黄强所有、侵权必究
case WM NOTIFY:
NMHDR *hdr = (NMHDR *)1 Pa ram;
if (hdr->code == EN_SELCHANGE)
{
SELCHANGE* pSelChange = (SELCHANGE *)1 Pa ram;
TCHAR buf[64];
WSprintf(buf L"i^J5%d - %d\n"/ pSelChange->chrg.cpMin, pSelChange->chrg.cpMax); OutputDebugString(buf);
)
}break;
本视频版权归黄强所有、侵权必究
谢谢观看!
THANKS FQR 氓 A 飞 C
本视频版权归黄强所有、侵权必究