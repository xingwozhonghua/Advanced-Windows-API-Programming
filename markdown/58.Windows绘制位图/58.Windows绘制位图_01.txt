Windows API编程 映 HU树5 C++ 3IWCED	CWSt
Windows绘制位图
本视频版权归黄强所有、侵权必究
indows绘制位图
位图图像（Bitmap）,亦称为点阵图像或绘制图像，是由称作像素（图片元素）的单个 点组成的。BMP文件的图像深度（用多少个二进制位来表示每个点的颜色）可选1 bit、4bit、 8bit及24bit。BMP文件存储数据时，图像的扫描方式是按从左^右、从下到上的JII赡。 Windows下绘制位图使用双缓冲技术，直接将位图选到内存兼容DC中，然后一次显示到窗 口 DC 上。
本视频版权归黄强所有、侵权必究
＞使用CreateCompatibleDC创建一个内存兼容DC ,但这个DC尺寸很小，通常是1*1像素 大小，不能直接绘制。
＞使用Loadimage或LoadBitmap加载现有位图,使用SelectObject将位图选入到兼容DC, 这时位图尺寸大小就相当于了内存设备环境尺寸大小。
＞使用BitBIt或Stretch Bit将兼容DCT欠性E示至lj窗口 DC上。
本视频版权归黄强所有、侵权必究
reateCompatibleD C 函数
CreateCompatibleDC函数创建具有指定设备兼容的存储器设备上下文（DC）。
HDC CreateCompatibleDC （
HDChdc//!见有DC的句柄。如果此句柄为NULL,则该函数将创建一个与应用程序当前 屏帛兼容的内存DC。
）；
返回值：	|]	/ J
如果函数成功，则返回值是内存DC的句柄。
如果函数失败，返回值为NULL。
备注：
内存DC仅存在于内存中，当创建内存DC时，其尺寸是1单色像素宽和1单色像素高。在应用程序使用 内存DC进行绘制操作之前，它必须在DC中选建正确宽度和高度的位图。要将位图选入DC,请使用 CreateCompatibleBitmap函数，指定所需的高度，宽度和颜色组织。
本视频版权归黄强所有、侵权必究
oadlmage 函数
Loadimage是一种函数可装载图标，光标，或位图。
HANDLE WINAPI Loadimage (
HINSTANCE hinst, 〃模块句柄，要加载独立资源，如c: \my.bmp,此参数设为NULL LPCTSTR IpszName, 〃图片路径或 MAKEINTRESOURCE(IDB_XXX)宏产生的字符串
UINT uType, //IMAGE BITMAP 位图、IMAGE CURSOR 炳、IMAGE ICON 图标
int cxDesired, //图标或光标的宽度、如果此参数为零并且未使用LR]DEFAULTSIZE,则该 函数将使用实际的资源高度。
int cyDesired, //图标或光标的高度
UINT	fuLoad//标识
)；
返刖直：
如果函数成功，贝I」返回值是新力I®的图像的句柄。
如果函数失败，返回值为NULL要获得扩展的错误信息，请调用GetLastError0
备注：
使用完毕后调用DeleteObject^放位图，DestroyCursor释放光标，Destroylcon释放图标
本视频版权归黄强所有、侵权必究
Loadlmage 函数
fuLoad可是以下值：
LR CREATEDIBSECTION 当uType参数指定IMAGE_BITMAP时，会导致函数返回DIB段位图而不是兼容的位图。 该标志对于加载位图而不将其映射到显示设备的颜色很有用。
LR DEFAULTCOLOR 默认标志;它什么也没做。它的意思是"不是LR_MONOCHROME ”。
LR_DEFAULTSIZE	如果cxDesired或cyDesired值设置为零，则使用游标或图标的系统度量值指定的宽度或高度。
如果未指定此标志且cxDesired和cyDesired设置为零，则该函数将使用实际的资源大小。如 果资源包含多个图像，则该函数使用第一个图像的大小。
LR_LOADFROMFILE	从由IpszName （图标，光标或位图文件）指定的文件加载独立映像。
本视频版权归黄强所有、侵权必究
itBIt函数
BitBIt函数执行对应于从指定的源设备上下文像素矩形到目标设备上下文的颜色数据的位块 传输。
BOOL BitBIt (
HDChdcDest, //目标设备上下文的句柄。 int nXDest, //目标矩形左上角的x坐标。 int nYDest, 〃目标矩形左上角的y坐标。 int nWidth, //目标矩形、源矩形的宽度 int nHeight, 〃目标矩形、源矩形的高度 HDChdcSrc, 〃源设备上下文的句柄。 int nXSrc, 〃源矩形左上角的x坐标 int nYSrc，〃源矩形左上角的y坐标
DWORD dwRop//光栅操作代码。这些代码定义如何将源矩形的颜色数据与目标 矩形的颜色数据组合以实现最终颜色。
返回值：
如果函数成功，返回值为非零。
如果函数失败，返回值为零，调用GetLastError获得扩展的错误信息.
本视频版权归黄强所有、侵权必究
'BitBIt 函数
dwRop可是以下值:
PATPAINT
SRCAND SRCCOPY SRCERASE SRCINVERT SRCPAINT WHITENESS
BLACKNESS CAPTUREBLT DSTINVERT MERGECOPY MERGEPAINT
NOMIRRORBITMAP NOTSRCCOPY NOTSRCERASE PATCOPY PATINVERT
使用物理调色板中与索引0关联的颜色填充目标矩形（对于默认物理调色板为黑色） 包括在结果图像中窗口顶部的任何窗口。默认情况下，图像只包含你的窗口。
颠倒目标矩形。
通过使用布尔AND运算符，将源矩形的颜色与当前在hdcDest中选择的画笔合并。
通过使用布尔或运算符将反转源矩形的颜色与目标矩形的颜色合并。
防止镜像被镜像。
将倒置的源矩形复制到目标。
通过使用布尔OR运算符组合源矩形和目标矩形的颜色，然后反转结果颜色。
将当前在hdcDest中选择的画笔复制到目标位图中。
通过使用布尔XOR运算符，将当前在hdcDest中选择的画笔的颜色与目标矩形 的颜色组合在一起。
通过使用布尔OR运算符，将当前在hdcDest中选择的画笔的颜色与反转的源矩形的颜色组合。 此操作的结果通过使用布尔或运算符与目标矩形的颜色相结合。
通过使用布尔AN D运算符组合源和目标矩形的颜色。
将源矩形直接复制到目标矩形。
通过使用布尔AND运算符将目标矩形的反转颜色与源矩形的颜色组合在一起。
通过使用布尔XOR运算符组合源和目标矩形的颜色。
通过使用布尔或运算符组合源和目标矩形的颜色。
使用物理调色板中与索引1关联的颜色填充目标矩形。（对于默认物理调色板为白色）
本视频版权归黄强所有、侵权必究
FSt retch Bit函数
Stretch BltW能拷贝从源矩形成目标矩形，拉伸或压缩位图以适应目标矩形的尺寸。
BOOL StretchBIt （
HDChdcDest, //目标设备上下文的句柄。
int nXDest, //目标矩形左上角的x坐标。
int nYDest, 〃目标矩形左上角的y坐标。
int nWidth, //目标矩形的宽度
int nHeight, 〃目标矩形的高度
HDChdcSrc, 〃源设备上下文的句柄。
int nXSrc, 〃源矩形左上角的x坐标
int nYSrc，〃源矩形左上角的y坐标
int nWidthSrc, 〃源矩形的宽度
int nHeightSrc, 〃源矩形的高度
DWORD dwRop//光栅操作代码。这些代码定义如何将源矩形的颜色数据与目标
矩形的颜色数据组合以实现最终颜色。
）；
返回值：
如果函数成功，返回值为非零。
如果函数失败，返回值为零，调用GetLastError获得扩展的错误信息.
本视频版权归黄强所有、侵权必究
■Stretch Bit函数失直问题?
Stretch Bit会碰到一些与点阵图大小缩放相关的一些问题:
1、在扩展一个点阵图时，Stretch Bit必须复制图素行或列。如果放大倍数不是原图的整数倍，那么此 操作会造成产生的图像有些失真。
2、当目标矩形比源矩形小的时候，必殖要将一些点去掉，默认做法是牖去掉的点与旁边的点做
AND运算，所以导致像素错误,
引起失真。
本视频版权归黄强所有、侵权必究
etStretchBItMode 函数
SetStretchBItMode函数可以设置指定设备环境中的位图拉伸模式，解决失真问题。
int SetStretchBltMode（
HDC hdc,	〃设备上下文句柄
int iStretchMode 〃位图伸展模式
）；
返回值：
如果函数成功，返回值为非零。
如果函数失败，返回值为零，调用GetLastError获得扩展的错误信息.
本视频版权归黄强所有、侵权必究
SetStretchBItMode 函数
iStretchMode可以取下列值：
BLACKONWHITE:使用消除和现在的像素颜色值进行逻辑AND （与）操作运算。如果该位图是单色位图，那么该 模式以牺牲白色像素为代价，保留黑色像素点。
COLORONCOLOR:删除像素。该模式删除所有消除的像素行，不保留其信息。
HALFTONE:	将源矩形区中的像素映射到目标矩形区的像素块中，覆盖目标像素块的一般颜色与源像素的颜
色接近。在设置完HALFTONE拉伸模之后，应用程序必须调用SetBrushOrgEx函数来设置刷子 的起始点。如果没有成功，那么会出现刷子没对准的情况。
STRETCH_ANDSCANS:与BLACKONWHITE一样。
STRETCH_DELETESCANS:与 COLO RON CO LOR一样。
STRETCH_HALFTONE:与HALFTONE相同。
STRETCH_ORSCANS:与WHITEONBLACK相同。
WHITEONBLACK:使用颜色值进行逻辑OR （或）操作，如果该位图为单色位图，那么该模式以牺牲黑色像素为代 价，保留白色像素点。
本视频版权归黄强所有、侵权必究
醐911尤沼
case wm—pazh
f
PA_NTSTRUCT ps;
HDC hdc n Beg-mpafnuhwnp-ePS)；
swsssn
HDC hMemDc n creas-comp2.-b-(DDC(hdc)；
注IMepH
HB_TMAP hBmp H (HB_TMAP)Led_mage(NULL、L=bg.bmpn_MAGE—B_TMAR 8。。、8。。、LR—LOADFROMFFE).
//函曷罗3-^DC
S ①(Daobm-cuhMemDC、hBmp)；
备b舅3
制 xtouf(hMemDC、_l00、—l0pLnHJ=!7t<Hr、_m(Dn(LnHJ=;7kE『??
s2-s-re_chBKMOde(hdc、COLORONCOLORr
//B-fBAhdc、o'。、4。。、4。。、hMemDC、o' o' SRCCOPY};
J?reffhB_f(hdc、o' o' 4。。、4。。、hMemDC、o' o' 8。。、8。。、SRCCOPO
&e-2.8bm-c-(h B mp)；
::De-2.eDC(hMemDC)；
Endpa-nuhwnd、p?ps)；

谢谢观看!
THANKS FQR 氓 A 飞 C
本视频版权归黄强所有、侵权必究